import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job

## @params: [TempDir, JOB_NAME]
args = getResolvedOptions(sys.argv, ['TempDir','JOB_NAME'])

sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)
## @type: DataSource
## @args: [database = "wildfiredb", table_name = "airpollution_copy_csv", transformation_ctx = "datasource0"]
## @return: datasource0
## @inputs: []
datasource0 = glueContext.create_dynamic_frame.from_catalog(database = "wildfiredb", table_name = "airpollution_copy_csv", transformation_ctx = "datasource0")
## @type: ApplyMapping
## @args: [mapping = [("site num", "long", "site num", "long"), ("address", "string", "address", "string"), ("state", "string", "state", "string"), ("county", "string", "county", "string"), ("city", "string", "city", "string"), ("date_local", "string", "date_local", "string"), ("no2 units", "string", "no2 units", "string"), ("no2 mean", "double", "no2 mean", "double"), ("no2 1st max value", "double", "no2 1st max value", "double"), ("no2 1st max hour", "long", "no2 1st max hour", "long"), ("no2 aqi", "long", "no2 aqi", "long"), ("o3 units", "string", "o3 units", "string"), ("o3 mean", "double", "o3 mean", "double"), ("o3 1st max value", "double", "o3 1st max value", "double"), ("o3 1st max hour", "long", "o3 1st max hour", "long"), ("o3 aqi", "long", "o3 aqi", "long"), ("so2 units", "string", "so2 units", "string"), ("so2 mean", "double", "so2 mean", "double"), ("so2 1st max value", "double", "so2 1st max value", "double"), ("so2 1st max hour", "long", "so2 1st max hour", "long"), ("so2 aqi", "long", "so2 aqi", "long"), ("co units", "string", "co units", "string"), ("co mean", "double", "co mean", "double"), ("co 1st max value", "double", "co 1st max value", "double"), ("co 1st max hour", "long", "co 1st max hour", "long"), ("co aqi", "long", "co aqi", "long"), ("stateid", "string", "stateid", "string"), ("year", "long", "year", "long")], transformation_ctx = "applymapping1"]
## @return: applymapping1
## @inputs: [frame = datasource0]
applymapping1 = ApplyMapping.apply(frame = datasource0, mappings = [("site num", "long", "site num", "long"), ("address", "string", "address", "string"), ("state", "string", "state", "string"), ("county", "string", "county", "string"), ("city", "string", "city", "string"), ("date_local", "string", "date_local", "string"), ("no2 units", "string", "no2 units", "string"), ("no2 mean", "double", "no2 mean", "double"), ("no2 1st max value", "double", "no2 1st max value", "double"), ("no2 1st max hour", "long", "no2 1st max hour", "long"), ("no2 aqi", "long", "no2 aqi", "long"), ("o3 units", "string", "o3 units", "string"), ("o3 mean", "double", "o3 mean", "double"), ("o3 1st max value", "double", "o3 1st max value", "double"), ("o3 1st max hour", "long", "o3 1st max hour", "long"), ("o3 aqi", "long", "o3 aqi", "long"), ("so2 units", "string", "so2 units", "string"), ("so2 mean", "double", "so2 mean", "double"), ("so2 1st max value", "double", "so2 1st max value", "double"), ("so2 1st max hour", "long", "so2 1st max hour", "long"), ("so2 aqi", "long", "so2 aqi", "long"), ("co units", "string", "co units", "string"), ("co mean", "double", "co mean", "double"), ("co 1st max value", "double", "co 1st max value", "double"), ("co 1st max hour", "long", "co 1st max hour", "long"), ("co aqi", "long", "co aqi", "long"), ("stateid", "string", "stateid", "string"), ("year", "long", "year", "long")], transformation_ctx = "applymapping1")
## @type: ResolveChoice
## @args: [choice = "make_cols", transformation_ctx = "resolvechoice2"]
## @return: resolvechoice2
## @inputs: [frame = applymapping1]
resolvechoice2 = ResolveChoice.apply(frame = applymapping1, choice = "make_cols", transformation_ctx = "resolvechoice2")
## @type: DropNullFields
## @args: [transformation_ctx = "dropnullfields3"]
## @return: dropnullfields3
## @inputs: [frame = resolvechoice2]
dropnullfields3 = DropNullFields.apply(frame = resolvechoice2, transformation_ctx = "dropnullfields3")
## @type: DataSink
## @args: [catalog_connection = "new_connection", connection_options = {"dbtable": "airpollution", "database": "wildfire"}, redshift_tmp_dir = TempDir, transformation_ctx = "datasink4"]
## @return: datasink4
## @inputs: [frame = dropnullfields3]
datasink4 = glueContext.write_dynamic_frame.from_jdbc_conf(frame = dropnullfields3, catalog_connection = "new_connection", connection_options = {"dbtable": "airpollution", "database": "wildfire"}, redshift_tmp_dir = args["TempDir"], transformation_ctx = "datasink4")
job.commit()